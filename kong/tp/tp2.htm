<!DOCTYPE HTML>
<html>
<head>

<script type="text/javascript" src="engine/math.js"></script>
<script type="text/javascript" src="engine/body.js"></script>
<script type="text/javascript" src="engine/world.js"></script>
<script type="text/javascript" src="engine/collision.js"></script>
<script type="text/javascript" src="engine/contact.js"></script>
<script type="text/javascript" src="engine/constraint.js"></script>
<script type="text/javascript" src="engine/ragdall.js"></script>

<script type="text/javascript">

var elapsed_time = 1/60;
var canvas;
var ctx;
var	ex = 10;
var ey = 10;
var ox = 20;
var oy = 20;

// pos y tamaño de pantalla
var OX = 1;
var OY = 1;
var DX = 80;
var DY = 50;

// posicion del mouse
var mouse_x = 0;
var mouse_y = 0;

var gravity = new Vector2( 0, 40 );
var fixed_dt = 1.0/60.0;								// avance del tiempo constante
var _world = new World();
var init = false;
var status = 0;
var bola = null;
var ID_bola=999;
var ID_palo=998;
var ID_p=997;
var cant_bolas=0;
var pos_hoyos = new Vector2(55,30);
var potencia = 100;
var ant_time=0;
var palo = null;
var llave=false;
var p=null;


function Update() 
{
    _world.Update(elapsed_time);
	for(var i=0;i<_world.m_bodyCount;++i)
			{
				var p = _world.bodies[i];
				if(p.id==ID_bola)
				{
					var salio = false;
						if(vec2_substract(pos_hoyos,p.position).length()<3)
						{
							p.position.Set(1+3*cant_bolas,1);
							p.SetStatic();
							salio = true;
						}
				}
			}
}              


function Render() 
{
    if (canvas.getContext)
    {
        // borro la pantalla
        ctx.fillStyle = 'rgba(0,0,0,255)';
        ctx.fillRect(0,0,2000,2000);

		// dibujo la escena esquematica con el motor 
	    _world.Render(ctx);
		
		ctx.fillStyle = 'rgb(255,0,0)';
		ctx.beginPath();
		ctx.arc(ox + pos_hoyos.x*ex, oy + pos_hoyos.y*ey, 2*ex, 0, Math.PI*2,true); 
		ctx.closePath();
		ctx.fill();
		
    }
}


function RenderLoop() 
{
    if (!init)
		return;
    
	Update();
	Render();
	
}


function doKeyDown(e) 
{
    e = e || window.event;
	var xPos = (mouse_x-ox)/ ex; 
	var yPos = (mouse_y-oy)/ ey; 
	
	
	if(e.keyCode==32)
	{
		
	}
	else
	if(e.keyCode==40)
	{
		
	}
	else
	if(e.keyCode==38)
	{
		
	}
	else
	if(e.keyCode==39)
	{
		
	}
	else
	if(e.keyCode==37)
	{
		
	}
}

function onMouseMove() 
{
	var xPos = window.event.offsetX;
	var yPos = window.event.offsetY;

    // actualizo la posicion del mouse
	mouse_x = xPos;
	mouse_y = yPos;
	/*ox += xPos - mouse_x;
	oy += yPos - mouse_y;
	  if(drag_body!=-1)
	        {
	            var ant_pos = _world.bodies[drag_body].position;
	            _world.bodies[drag_body].position = new Vector2((xPos-ox)/ex, (yPos-oy)/ey);
	            _world.bodies[drag_body].angularVelocity = 0;
	            _world.bodies[drag_body].inverseMass = 0;
	            var dt = _world.time - ant_time;
	            if(dt)
	            {
	                _world.bodies[drag_body].velocity = vec2_multiply(vec2_substract(_world.bodies[drag_body].position , ant_pos)  , 1/dt);
	            }
	            ant_time = _world.time;
	        }*/
	palo.position.x=mouse_x/ex-2;
	palo.position.y=mouse_y/ey-2;
}

function onMouseDown(e) {
    e = e || window.event;
    switch (e.which)
    {
        case 1:
		/*for(var i =0; i<2;i++)
		{
          var xPos = (mouse_x - ox) / ex;
          var yPos = (mouse_y - oy) / ey;
                    if ((drag_body = _world.PointNearBodyCM(new Vector2(xPos, yPos), 20 / ex)) != -1) 
					{
                        ant_time = _world.time;
						llave=true;
                    }
		}   */
            break;
        case 2:
            // middle button
            break;
        case 3:
            // right button
            break;
    }
}


function onMouseUp(e) 
{
    e = e || window.event;
    switch (e.which) {
        case 1:
          /*var xPos = (mouse_x - ox) / ex;
          var yPos = (mouse_y - oy) / ey;
                    if ((drag_body = _world.PointNearBodyCM(new Vector2(xPos, yPos), 20 / ex)) != -1) 
					{
                        drag_body.deleted=true;
                    }*/
            break;
        case 2:
            // middle button
            break;
        case 3:
            // right button
            break;
    }
}

function loadscene()
{

    p = _world.AddBox(20,30,60,2);
    p.SetStatic();
    p=_world.AddBox(10,26.5,5,5);
    p=_world.AddBox(25,25.4,5,2.5);
    p=_world.AddBox(25,27.9,5,2.5);
    p=_world.AddBox(20,23,30,2);
    bola=_world.AddCircle(10,20,2);
	palo = _world.AddBox(DX/2,OY+DY/2,5,2);
	palo.collider_list=[p];
	palo.SetStatic();
	
	 /*for (var i =5; i < _world.m_bodyCount; ++i) {
        _world.bodies[i].SetStaticEquilibrium();
     }	*/
	
	
    init = true;

}

function main()
{   
	document.addEventListener( "keydown", doKeyDown, true);
	document.addEventListener("mousemove", onMouseMove, true);
	document.addEventListener("mousedown", onMouseDown, true);
	document.addEventListener("mouseup", onMouseUp, true);

    canvas = document.getElementById('mycanvas');
    ctx = canvas.getContext('2d');
	loadscene();
    setInterval(RenderLoop, elapsed_time * 1000);
} 


</script>
</head>
<body onload="main();">
	<canvas id="mycanvas" width="900" height="600"></canvas>
</body>
</html>
 
